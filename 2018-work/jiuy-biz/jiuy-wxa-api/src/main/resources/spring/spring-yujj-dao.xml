<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	 http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd

	 http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">

    <context:property-placeholder location="classpath:constants.properties"/>

    <!-- 配置数据源 -->
    <bean id="dataReadSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
        <property name="poolName" value="read"/>
        <property name="driverClassName" value="${db.read.driver}"/>
        <property name="jdbcUrl" value="${db.read.server}"/>
        <property name="username" value="${db.read.username}"/>
        <property name="password" value="${db.read.password}"/>
        <property name="maximumPoolSize" value="20"/>
        <property name="connectionInitSql" value="set names utf8mb4;"/>
    </bean>

    <!-- 配置数据源 -->
    <bean id="dataWriteSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
        <property name="poolName" value="write"/>
        <property name="driverClassName" value="${db.driver}"/>
        <property name="jdbcUrl" value="${db.server}"/>
        <property name="username" value="${db.username}"/>
        <property name="password" value="${db.password}"/>
        <property name="maximumPoolSize" value="20"/>
        <property name="connectionInitSql" value="set names utf8mb4;"/>
    </bean>


    <!-- 动态数据源，根据service接口上的注解来决定取哪个数据源 -->
    <bean id="dataSource" class="com.wxa.db.DynamicDataSource">
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <entry key="read" value-ref="dataReadSource"/>
                <entry key="write" value-ref="dataWriteSource"/>
            </map>
        </property>
        <property name="putAll">
            <map key-type="java.lang.String">
                <entry key="read" value-ref="dataReadSource"/>
                <entry key="write" value-ref="dataWriteSource"/>
            </map>
        </property>


        <property name="defaultTargetDataSource" ref="dataWriteSource"/>

    </bean>
    <tx:annotation-driven transaction-manager="dataSourceTransactionManager" mode="proxy" proxy-target-class="false"/>

    <bean id="dataSourceTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--
    <bean id="sqlSessionFactory" class="com.jiuyuan.ext.mybatis.CustomSqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:mybatis/store/mybatis-config.xml" />
        <property name="mapperLocations">
            <list>
                <value>classpath*:mybatis/jiuyuan/mapper/**/*.xml</value>
                <value>classpath*:mybatis/store/mapper/**/*.xml</value>
            </list>
        </property>
        <property name="handledTypesPackages" value="com.jiuyuan.constant;com.store.constant" />
        <property name="handledTypesBaseClasses">
            <list>
                <value>com.jiuyuan.util.enumeration.IntEnum</value>
                <value>com.jiuyuan.util.enumeration.StringEnum</value>
            </list>
        </property>
    </bean> -->

    <bean class="com.wxa.db.MultiDataSourceTransactionFactory" name="multiDataSourceTransactionFactory"/>
    <bean id="sqlSessionFactory" class="com.baomidou.mybatisplus.spring.MybatisSqlSessionFactoryBean">
        <!-- 配置数据源 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 自动扫描 Xml 文件位置
        <property name="mapperLocations" value="classpath:mybatis/*/*.xml"/>-->
        <property name="mapperLocations">
            <list>
                <value>classpath*:mybatis/jiuyuan/mapper/**/*.xml</value>
                <value>classpath*:mybatis/store/mapper/**/*.xml</value>
                <value>classpath*:com/jiuy/rb/xml/**/*.xml</value>
            </list>
        </property>
        <property name="transactionFactory" ref="multiDataSourceTransactionFactory"/>
        <property name="configLocation" value="classpath:spring/mybatis-config.xml"/>

        <!-- 以上配置和传统 Mybatis 一致 -->

        <!-- 插件配置 -->
        <property name="plugins">
            <array>

                <bean class="com.jiuy.base.mapper.NeedKeyInterceptor"/>

                <bean class="com.jiuy.base.mapper.AutoIdInterceptor"/>

                <!-- 分页插件配置 -->
                <bean id="paginationInterceptor" class="com.baomidou.mybatisplus.plugins.PaginationInterceptor">
                    <!-- 指定数据库方言 -->
                    <property name="dialectType" value="mysql"/>
                </bean>

                <bean id="paginationInterceptor" class="com.jiuy.base.mapper.MyPageQuery">
                    <!-- 指定数据库方言 -->
                    <property name="dialectType" value="mysql"/>
                </bean>


                <!-- 如需要开启其他插件，可配置于此 -->


                <!-- 性能分析插件配置 ：性能分析拦截器，用于输出每条 SQL 语句及其执行时间-->
                <!-- SQL 执行性能分析，开发环境使用，线上不推荐。 maxTime 指的是 sql 最大执行时长 -->
                <!-- 注意！该插件只用于开发环境，不建议生产环境使用。。。-->
                <!-- 参数：maxTime 毫秒 SQL 执行最大时长，超过自动停止运行，有助于发现问题。 -->
                <!-- 参数：format SQL SQL是否格式化，默认false。
               <bean id="performanceInterceptor"  class="com.baomidou.mybatisplus.plugins.PerformanceInterceptor">

                   <property name="maxTime">
                       <value>${mybatisplus.maxTime}</value>
                   </property>

                   <property name="format">
                       <value>${mybatisplus.format}</value>
                   </property>
               </bean>-->
            </array>
        </property>

        <!-- MP 全局配置注入-->
        <property name="globalConfig" ref="globalConfig"/>
    </bean>

    <!-- 定义 MP 全局策略 -->
    <bean id="globalConfig" class="com.baomidou.mybatisplus.entity.GlobalConfiguration">
        <!-- 主键策略配置 -->
        <!-- 可选参数：AUTO->`0`("数据库ID自增")、INPUT->`1`(用户输入ID")、 ID_WORKER->`2`("全局唯一ID")、 UUID->`3`("全局唯一ID")
        -->
        <property name="idType" value="0"/>

        <!-- 数据库类型配置 -->
        <!-- 可选参数（默认mysql）：MYSQL->`mysql`、ORACLE->`oracle`、 DB2->`db2`、H2->`h2`、HSQL->`hsql`、 SQLITE->`sqlite`、POSTGRE->`postgresql`、SQLSERVER2005->`sqlserver2005`、 SQLSERVER->`sqlserver`

        <property name="dbType" value="mysql"/> -->

        <!-- 全局表为下划线命名设置 true  表名和字段名是否使用下划线命名
        <property name="dbColumnUnderline" value="true"/>-->

        <!-- 自定义全局操作，自定义注入 deleteAll 方法  -->
        <property name="sqlInjector" ref="mySqlInjector"/>

        <!-- 公共字段填充处理器 -->
        <property name="metaObjectHandler" ref="myMetaObjectHandler"/>
    </bean>

    <!-- 注入自定义SQL 自定义注入器 -->
    <bean id="mySqlInjector" class="com.store.mybatisplus.MySqlInjector"/>

    <!-- 自定义处理器 -->
    <bean id="myMetaObjectHandler" class="com.store.mybatisplus.MyMetaObjectHandler"/>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.jiuyuan.dao.mapper;com.store.dao.mapper;com.jiuy.rb.mapper;"/>
        <!--
        <property name="annotationClass" value="com.jiuyuan.dao.annotation.DBMaster" /> -->
        <!-- optional unless there are multiple session factories defined -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!-- 通用mapper http://git.oschina.net/free/Mapper
    <bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.store.dao.mapper" />
        <property name="markerInterface" value="tk.mybatis.mapper.common.Mapper"/>
         <property name="properties">
            <value>
                mappers=com.store.dao.mapper.JYBaseMapper
            </value>
        </property>

    </bean> -->
</beans>
