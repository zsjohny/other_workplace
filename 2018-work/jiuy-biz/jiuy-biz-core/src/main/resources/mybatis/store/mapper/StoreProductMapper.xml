<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.store.dao.mapper.StoreProductMapper">
	
	<!-- select id="getByStoreId" resultType="StoreProduct">
		select * from store_Product
		where StoreId = #{storeId} and Status = 0
	</select>
	
	<select id="getByStoreIdType" resultType="StoreProduct">
		select * from store_Product
		<where>
			StoreId = #{storeId} and Status = 0
			<if test="type == 0">
				<![CDATA[and OnSaleCount > 0]]>
			</if>
			<if test="type == -1">
				<![CDATA[and OffSaleCount > 0]]>
			</if>
		</where>
	</select -->
	
	<insert id="insertStoreProduct" parameterType="map">
		<![CDATA[
			insert into store_Product(StoreId, ProductId, SkuId, OnSaleCount, OffSaleCount, Status, CreateTime, UpdateTime)
			values
		]]>
		<foreach collection="orderItemList" item="orderItem" open="(" separator="),(" close=")">
			<![CDATA[
				 #{orderItem.storeId}, #{orderItem.productId}, #{orderItem.skuId}, 0, #{orderItem.buyCount}, 0, #{orderItem.createTime}, #{orderItem.createTime}
			]]>
		</foreach>
		<![CDATA[
		 on duplicate key update
	OffSaleCount = OffSaleCount + #{orderItem.buyCount}, UpdateTime = #{orderItem.createTime}, Status = 0
	]]>
	</insert>
	
	<!-- select id="getProductByStoreId" resultType="map">
		select sum(OnSaleCount) as onsale, sum(OffSaleCount) as offsale, ProductId from store_Product 
		group by ProductId
	</select>
	
	<select id="getCountBySaleStatus" resultType="int">
		select count(*) from store_Product
		<where>
			Status = 0
			<if test="type == 0">
				<![CDATA[and OnSaleCount > 0]]>
			</if>
			<if test="type == -1">
				<![CDATA[and OffSaleCount > 0]]>
			</if>
		</where>
	</select>
	
	<select id="getProductByStoreIdType" resultType="map">
		select sum(OnSaleCount) as onsale, sum(OffSaleCount) as offsale, ProductId from store_Product 
		<where>
			Status = 0 and StoreId = #{storeId}
			<if test="type == 0">
				<![CDATA[and OnSaleCount > 0]]>
			</if>
			<if test="type == -1">
				<![CDATA[and OffSaleCount > 0]]>
			</if>
			<if test="content != null">
				and (ProductId in (select Id from yjj_Product where Name like concat("%", #{content}, "%")) 
					or ProductId in (select Id from yjj_Product where Id like concat("%", #{content}, "%")) 
					or SkuId in (select Id from yjj_ProductSKU where SkuNo like concat("%", #{content}, "%")))
			</if>
		</where>
		group by ProductId
		limit #{pageQuery.limit} offset #{pageQuery.offset}
	</select>
	
	<select id="getProductByStoreIdTypeCount" resultType="int">
		select count(1) from (
			select count(1) from store_Product 
			<where>
				Status = 0 and StoreId = #{storeId}
				<if test="type == 0">
					<![CDATA[and OnSaleCount > 0]]>
				</if>
				<if test="type == -1">
					<![CDATA[and OffSaleCount > 0]]>
				</if>
				<if test="content != null">
					and (ProductId in (select Id from yjj_Product where Name like concat("%", #{content}, "%")) 
						or ProductId in (select Id from yjj_Product where Id like concat("%", #{content}, "%")) 
						or SkuId in (select Id from yjj_ProductSKU where SkuNo like concat("%", #{content}, "%")))
				</if>
			</where>
			group by ProductId) as a
	</select -->
	
	<select id="getByStoreIdProductId" resultType="StoreProduct">
		select * from store_Product 
		where StoreId = #{storeId} and ProductId = #{productId} and Status = 0
	</select>
	
	<select id="getByStoreIdSkuId" resultType="StoreProduct">
		select * from store_Product 
		where StoreId = #{storeId} and SkuId = #{skuId} and Status = 0
	</select>
	
	<!-- update id="outStock">
		update store_Product
		set OnSaleCount = OnSaleCount - #{onCount}, OffSaleCount = OffSaleCount - #{offCount}
		where StoreId = #{storeId} and SkuId = #{skuId}
	</update>
	
	<update id="updateSaleStatus">
		update store_Product
		<set>
			<if test="saleStatus == 0">
				OnSaleCount = OnSaleCount + OffSaleCount, OffSaleCount = 0,
			</if>
			<if test="saleStatus == -1">
				OffSaleCount = OffSaleCount + OnSaleCount, OnSaleCount = 0,
			</if>
		</set>
		where StoreId = #{storeId} and ProductId = #{productId}
	</update>
	
	<update id="deleteBySkuId">
		update store_Product
		set Status = -1, UpdateTime = unix_timestamp() * 1000
		where StoreId = #{storeId} and SkuId = #{skuId}
	</update -->
	
</mapper>