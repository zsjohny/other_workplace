<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.jiuy.core.dao.impl.sql.ProductCategoryMapperSqlImpl">

	<insert id="insertBatch" parameterType="List"> 
		<![CDATA[
    		insert into yjj_ProductCategory( ProductId,CategoryId,Status,CreateTime, UpdateTime ) values ]]>
		<foreach collection="list" item="item" index="index"
			separator=",">
			( #{item.productId},#{item.categoryId},#{item.status},
			#{item.createTime},#{item.updateTime} )
		</foreach>
	</insert>

	<delete id="deleteByProductIds">
	<![CDATA[
			delete from yjj_ProductProperty
			where ProductId in
		]]>
		<foreach collection="ids" item="id" open="(" separator=","
			close=")">
			<![CDATA[
				#{id}
			]]>
		</foreach>
	</delete>

	<delete id="deleteProductCategory">
		DELETE FROM yjj_ProductCategory
		WHERE ProductId = #{productId}
	</delete>
	
	<delete id="deleteWholeSaleCategory">
		DELETE FROM yjj_WholeSaleCategory
		WHERE ProductId = #{productId}
	</delete>

	<insert id="addProductCategory" parameterType="map">
		INSERT INTO yjj_ProductCategory(ProductId, CategoryId, CreateTime)
		VALUES
		<foreach collection="classificationArrayInt" item="item" index="index" separator=",">
			(#{productId}, #{item}, #{createTime})
		</foreach>
	</insert>
	
	<insert id="addWholeSaleCategory" parameterType="map">
		INSERT INTO yjj_WholeSaleCategory(ProductId, CategoryId, CreateTime)
		VALUES
		<foreach collection="classificationArrayInt" item="item" index="index" separator=",">
			(#{productId}, #{item}, #{createTime})
		</foreach>
	</insert>
	
	<select id="loadProductCategoryNames" parameterType="List" resultType="map">
			select a.ProductId, b.CategoryName 
			from yjj_ProductCategory a, yjj_Category b
			where a.CategoryId = b.Id and b.Status = 0 and ProductId in   
		<foreach collection="list" item="id" open="(" separator="," close=")">
				#{id}
		</foreach>
	</select>
	
	<select id="getCatNameById" parameterType="map" resultType="map">
		SELECT 
		    b.CategoryName
		FROM
		    yjj_ProductCategory a,
		    yjj_Category b
		WHERE
		    a.CategoryId = b.Id AND b.Status = 0
		        AND ProductId = #{productId}
	</select>
	
	<select id="productsOfCategory" parameterType="map" resultType="Long">
		SELECT 
		    ProductId
		FROM
		    yjj_ProductCategory
		WHERE
		    CategoryId IN 
			<foreach collection="categoryIds" item="catId" open="(" separator="," close=")">
				#{catId}
			</foreach> 
			and status = 0
	</select>
	
	<insert id="addVirtualProduct" parameterType="map">
		INSERT yjj_ProductCategory(CategoryId, ProductId, CreateTime, UpdateTime)
		VALUES
		<foreach collection="productIds" item="productId" separator=",">
			(#{categoryId}, #{productId}, unix_timestamp()*1000, unix_timestamp()*1000)
		</foreach>
		<![CDATA[
            ON DUPLICATE KEY UPDATE Status = 0, UpdateTime=UNIX_TIMESTAMP()*1000;
        ]]>
	</insert>
	
	<select id="getByCategoryIds" parameterType="map" resultType="ProductCategory">
		select * from yjj_ProductCategory
		where CategoryId in (
		<foreach collection="categoryIds" item="categoryId" separator=",">
			#{categoryId}
		</foreach> ) and status = 0
	</select>

	<update id="rmRelatedProducts" parameterType="map">
		update yjj_ProductCategory
		set Status = -1 
		where CategoryId = #{categoryId}
	</update>
	
	<select id="getErpCat" resultType="map">
		select c.* 
		from (select Id, ProductId, CategoryId, CategoryName
				from (select Id, ProductId, CategoryId from yjj_ProductCategory where Status = 0) as a 
				left join (select Id as CatId, CategoryName from yjj_Category where CategoryType = 0 and Status = 0) as b 
				on a.CategoryId = b.CatId ) as c 
		where Id in (
				select min(c.Id) from (	select * from (select Id, ProductId, CategoryId from yjj_ProductCategory where Status = 0) as a 
				left join (select Id as CatId, CategoryName from yjj_Category where CategoryType = 0 and Status = 0) as b 
				on a.CategoryId = b.CatId ) as c group by ProductId)
	</select>
	
	<select id="itemsOfCategoryIds" resultType="ProductCategory">
		select * from yjj_ProductCategory
		where CategoryId in
		<foreach collection="collection" item="categoryId" open="(" separator="," close=")">
			#{categoryId}
		</foreach> and Status = 0
		order by CategoryId asc
	</select>
	
	<select id="itemsOfProductIds" resultType="ProductCategory">
		select * from yjj_ProductCategory
		where ProductId in
		<foreach collection="productIds" item="productId" open="(" separator="," close=")">
			#{productId}
		</foreach>
		order by ProductId asc
	</select>
	
	<select id="itemsWholeSaleOfProductIds" resultType="ProductCategory">
		select * from yjj_WholeSaleCategory
		where ProductId in
		<foreach collection="productIds" item="productId" open="(" separator="," close=")">
			#{productId}
		</foreach>
		order by ProductId asc
	</select>
	
	<update id="delete">
		update yjj_ProductCategory
		set Status = -1, UpdateTime = #{now}
		<where>
			<if test="productId != null">
				and ProductId = #{productId}
			</if>
			<if test="categoryId != null">
				and CategoryId = #{categoryId}
			</if>
		</where>
	</update>
	
	<select id="search" resultType="ProductCategory">
		select * from yjj_ProductCategory
		<where>
			Status = 0 
			<if test="productId != null">
				and ProductId = #{productId}
			</if>
		</where>
	</select>
	
	<insert id="batchAddItems">
		insert yjj_ProductCategory(ProductId,CategoryId,Status,CreateTime, UpdateTime)
		values
		<foreach collection="productCategories" item="item" open="(" separator="),(" close=")">
			 #{item.productId}, #{item.categoryId}, #{item.status}, #{item.createTime}, #{item.updateTime} 
		</foreach>
	</insert>
	
</mapper>