# 固定前缀org.quartz
# 主要分为scheduler、threadPool、jobStore、plugin等部分
#
# instanceName 不能使用defaultQuartzScheduler 因为内存要用这个
org.quartz.scheduler.instanceName=MyQuartzScheduler
org.quartz.scheduler.instanceId=AUTO
org.quartz.scheduler.rmi.export=false
org.quartz.scheduler.rmi.proxy=false
org.quartz.scheduler.wrapJobExecutionInUserTransaction=false


#============================================================================
# 调度器线程池配置
#============================================================================
org.quartz.threadPool.class=org.quartz.simpl.SimpleThreadPool
# 指定多少个工作者线程被创建用来处理 Job
org.quartz.threadPool.threadCount=10
# 设置工作者线程的优先级（最大值10，最小值1，常用值5）
org.quartz.threadPool.threadPriority=5
# 加载任务代码的ClassLoader是否从外部继承
org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread=true
org.quartz.jobStore.misfireThreshold=60000


#============================================================================
# Configure JobStore 作业存储配置
#============================================================================
# 默认配置，数据保存到内存(调度程序信息是存储在被分配给JVM的内存里面，运行速度快)
#org.quartz.jobStore.class= org.quartz.simpl.RAMJobStore
# 持久化配置（存储方式使用JobStoreTX，也就是数据库）
org.quartz.jobStore.class=org.quartz.impl.jdbcjobstore.JobStoreTX
# 驱动器方言
org.quartz.jobStore.driverDelegateClass=org.quartz.impl.jdbcjobstore.StdJDBCDelegate
# 使用自己的配置文件
org.quartz.jobStore.useProperties=true
#数据库中quartz表的表名前缀
org.quartz.jobStore.tablePrefix=qrtz_
org.quartz.jobStore.dataSource=myQuartzDB
#是否使用集群（如果项目只部署到 一台服务器，就不用了）
org.quartz.jobStore.isClustered=false
#org.quartz.jobStore.isClustered = true
#Scheduler节点检查失败时间。默认值是 15000 (即15 秒)
#org.quartz.jobStore.clusterCheckinInterval = 2000

#============================================================================
# Configure Datasources配置数据源(可被覆盖，如果在schedulerFactoryBean指定数据源)
#============================================================================
# 在factoryBean 中覆盖掉了