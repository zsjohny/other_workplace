<?xml version="1.0" encoding="UTF-8" ?> 
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" > 
<mapper namespace="com.e_commerce.miscroservice.user.mapper.MemberLogMapper">
 
 	<!-- 主要的返回映射-->
	<resultMap id="BaseResultMap" type="com.e_commerce.miscroservice.commons.entity.application.user.MemberLog"	>
		<id column="id" property="id" jdbcType="BIGINT" />
		<result column="member_id"  property="memberId"  jdbcType="BIGINT" />
		<result column="source"  property="source"  jdbcType="VARCHAR" />
		<result column="order_no"  property="orderNo"  jdbcType="CHAR" />
		<result column="before_del_state"  property="beforeDelState"  jdbcType="TINYINT" />
		<result column="after_del_state"  property="afterDelState"  jdbcType="TINYINT" />
		<result column="before_total_money"  property="beforeTotalMoney"  jdbcType="DOUBLE" />
		<result column="after_total_money"  property="afterTotalMoney"  jdbcType="DOUBLE" />
		<result column="before_end_time"  property="beforeEndTime"  jdbcType="BIGINT" />
		<result column="after_end_time"  property="afterEndTime"  jdbcType="BIGINT" />
		<result column="before_time_queue"  property="beforeTimeQueue"  jdbcType="VARCHAR" />
		<result column="after_time_queue"  property="afterTimeQueue"  jdbcType="VARCHAR" />
		<result column="create_time"  property="createTime"  jdbcType="TIMESTAMP" />
		<result column="create_user_id"  property="createUserId"  jdbcType="BIGINT" />
		<result column="before_wx_closed_time"  property="beforeWxClosedTime"  jdbcType="BIGINT" />
		<result column="after_wx_closed_time"  property="afterWxClosedTime"  jdbcType="BIGINT" />
	</resultMap>

	<!-- 所有的列名-->
	<sql id="Base_Column_List" >
		id,member_id,source,order_no,before_del_state,after_del_state,before_total_money,after_total_money,before_end_time,
		after_end_time,before_time_queue,after_time_queue,create_time,create_user_id,before_wx_closed_time,after_wx_closed_time
	</sql>

	<!-- 精确更新的字段-->
	<sql id="updateBase">
		<if test="id  !=null">
			id = #{id,jdbcType=BIGINT}, 
		</if>
		<if test="memberId  !=null">
			member_id = #{memberId,jdbcType=BIGINT}, 
		</if>
		<if test="source  !=null">
			source = #{source,jdbcType=VARCHAR}, 
		</if>
		<if test="orderNo  !=null">
			order_no = #{orderNo,jdbcType=CHAR}, 
		</if>
		<if test="beforeDelState  !=null">
			before_del_state = #{beforeDelState,jdbcType=TINYINT}, 
		</if>
		<if test="afterDelState  !=null">
			after_del_state = #{afterDelState,jdbcType=TINYINT}, 
		</if>
		<if test="beforeTotalMoney  !=null">
			before_total_money = #{beforeTotalMoney,jdbcType=DOUBLE}, 
		</if>
		<if test="afterTotalMoney  !=null">
			after_total_money = #{afterTotalMoney,jdbcType=DOUBLE}, 
		</if>
		<if test="beforeEndTime  !=null">
			before_end_time = #{beforeEndTime,jdbcType=BIGINT}, 
		</if>
		<if test="afterEndTime  !=null">
			after_end_time = #{afterEndTime,jdbcType=BIGINT}, 
		</if>
		<if test="beforeTimeQueue  !=null">
			before_time_queue = #{beforeTimeQueue,jdbcType=VARCHAR}, 
		</if>
		<if test="afterTimeQueue  !=null">
			after_time_queue = #{afterTimeQueue,jdbcType=VARCHAR}, 
		</if>
		<if test="createTime  !=null">
			create_time = #{createTime,jdbcType=TIMESTAMP}, 
		</if>
		<if test="createUserId  !=null">
			create_user_id = #{createUserId,jdbcType=BIGINT}, 
		</if>
		<if test="beforeWxClosedTime  !=null">
			before_wx_closed_time = #{beforeWxClosedTime,jdbcType=BIGINT}, 
		</if>
		<if test="afterWxClosedTime  !=null">
			after_wx_closed_time = #{afterWxClosedTime,jdbcType=BIGINT} 
		</if>
	</sql>

	<!-- 通过主键查找-->
	<select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="Long" >
		select 
		<include refid="Base_Column_List" />
		from yjj_member_log
		where  id = #{id,jdbcType=BIGINT} 
	</select>

	<!-- 通过主键删除-->
	<delete id="deleteByPrimaryKey" parameterType="Long" >
		delete from yjj_member_log
		where id = #{id,jdbcType=BIGINT} 
	</delete>

	<!-- 普通插入全字段插t入-->
	<insert id="insert" parameterType="com.e_commerce.miscroservice.commons.entity.application.user.MemberLog" >
		insert into yjj_member_log
		(
			id,
			member_id,
			source,
			order_no,
			before_del_state,
			after_del_state,
			before_total_money,
			after_total_money,
			before_end_time,
			after_end_time,
			before_time_queue,
			after_time_queue,
			create_time,
			create_user_id,
			before_wx_closed_time,
			after_wx_closed_time
		)
		values
		(
			#{id ,jdbcType=BIGINT},
			#{memberId ,jdbcType=BIGINT},
			#{source ,jdbcType=VARCHAR},
			#{orderNo ,jdbcType=CHAR},
			#{beforeDelState ,jdbcType=TINYINT},
			#{afterDelState ,jdbcType=TINYINT},
			#{beforeTotalMoney ,jdbcType=DOUBLE},
			#{afterTotalMoney ,jdbcType=DOUBLE},
			#{beforeEndTime ,jdbcType=BIGINT},
			#{afterEndTime ,jdbcType=BIGINT},
			#{beforeTimeQueue ,jdbcType=VARCHAR},
			#{afterTimeQueue ,jdbcType=VARCHAR},
			#{createTime ,jdbcType=TIMESTAMP},
			#{createUserId ,jdbcType=BIGINT},
			#{beforeWxClosedTime ,jdbcType=BIGINT},
			#{afterWxClosedTime ,jdbcType=BIGINT}
		)
	</insert>

	<!-- 批量插入，全部字段插入-->
	<insert id="insertBach"   parameterType="List" >
		insert into yjj_member_log
		(
			id,
			member_id,
			source,
			order_no,
			before_del_state,
			after_del_state,
			before_total_money,
			after_total_money,
			before_end_time,
			after_end_time,
			before_time_queue,
			after_time_queue,
			create_time,
			create_user_id,
			before_wx_closed_time,
			after_wx_closed_time
		)
		values 
		<foreach collection="list" item="item" separator=",">
		(
			#{item.id ,jdbcType=BIGINT},
			#{item.memberId ,jdbcType=BIGINT},
			#{item.source ,jdbcType=VARCHAR},
			#{item.orderNo ,jdbcType=CHAR},
			#{item.beforeDelState ,jdbcType=TINYINT},
			#{item.afterDelState ,jdbcType=TINYINT},
			#{item.beforeTotalMoney ,jdbcType=DOUBLE},
			#{item.afterTotalMoney ,jdbcType=DOUBLE},
			#{item.beforeEndTime ,jdbcType=BIGINT},
			#{item.afterEndTime ,jdbcType=BIGINT},
			#{item.beforeTimeQueue ,jdbcType=VARCHAR},
			#{item.afterTimeQueue ,jdbcType=VARCHAR},
			#{item.createTime ,jdbcType=TIMESTAMP},
			#{item.createUserId ,jdbcType=BIGINT},
			#{item.beforeWxClosedTime ,jdbcType=BIGINT},
			#{item.afterWxClosedTime ,jdbcType=BIGINT}
		)
		</foreach>
	</insert>

	<!-- 精确插入，非null得字段才会插入-->
	<insert id="insertSelective" parameterType="com.e_commerce.miscroservice.commons.entity.application.user.MemberLog" useGeneratedKeys="true" keyProperty="id" >
		insert into yjj_member_log
		<trim prefix="(" suffix=")" suffixOverrides="," > 
			<if test="id !=null">  
				id,
			</if>
			<if test="memberId !=null">  
				member_id,
			</if>
			<if test="source !=null">  
				source,
			</if>
			<if test="orderNo !=null">  
				order_no,
			</if>
			<if test="beforeDelState !=null">  
				before_del_state,
			</if>
			<if test="afterDelState !=null">  
				after_del_state,
			</if>
			<if test="beforeTotalMoney !=null">  
				before_total_money,
			</if>
			<if test="afterTotalMoney !=null">  
				after_total_money,
			</if>
			<if test="beforeEndTime !=null">  
				before_end_time,
			</if>
			<if test="afterEndTime !=null">  
				after_end_time,
			</if>
			<if test="beforeTimeQueue !=null">  
				before_time_queue,
			</if>
			<if test="afterTimeQueue !=null">  
				after_time_queue,
			</if>
			<if test="createTime !=null">  
				create_time,
			</if>
			<if test="createUserId !=null">  
				create_user_id,
			</if>
			<if test="beforeWxClosedTime !=null">  
				before_wx_closed_time,
			</if>
			<if test="afterWxClosedTime !=null">  
				after_wx_closed_time,
			</if>
		</trim>

		<trim prefix="values (" suffix=")" suffixOverrides="," >
			<if test="id  !=null">
				#{id,jdbcType=BIGINT}, 
			</if>
			<if test="memberId  !=null">
				#{memberId,jdbcType=BIGINT}, 
			</if>
			<if test="source  !=null">
				#{source,jdbcType=VARCHAR}, 
			</if>
			<if test="orderNo  !=null">
				#{orderNo,jdbcType=CHAR}, 
			</if>
			<if test="beforeDelState  !=null">
				#{beforeDelState,jdbcType=TINYINT}, 
			</if>
			<if test="afterDelState  !=null">
				#{afterDelState,jdbcType=TINYINT}, 
			</if>
			<if test="beforeTotalMoney  !=null">
				#{beforeTotalMoney,jdbcType=DOUBLE}, 
			</if>
			<if test="afterTotalMoney  !=null">
				#{afterTotalMoney,jdbcType=DOUBLE}, 
			</if>
			<if test="beforeEndTime  !=null">
				#{beforeEndTime,jdbcType=BIGINT}, 
			</if>
			<if test="afterEndTime  !=null">
				#{afterEndTime,jdbcType=BIGINT}, 
			</if>
			<if test="beforeTimeQueue  !=null">
				#{beforeTimeQueue,jdbcType=VARCHAR}, 
			</if>
			<if test="afterTimeQueue  !=null">
				#{afterTimeQueue,jdbcType=VARCHAR}, 
			</if>
			<if test="createTime  !=null">
				#{createTime,jdbcType=TIMESTAMP}, 
			</if>
			<if test="createUserId  !=null">
				#{createUserId,jdbcType=BIGINT}, 
			</if>
			<if test="beforeWxClosedTime  !=null">
				#{beforeWxClosedTime,jdbcType=BIGINT}, 
			</if>
			<if test="afterWxClosedTime  !=null">
				#{afterWxClosedTime,jdbcType=BIGINT} 
			</if>
		</trim>
	</insert> 

	<!-- 精确更新-->
	<update id="updateByPrimaryKeySelective" parameterType="com.e_commerce.miscroservice.commons.entity.application.user.MemberLog" >
		update yjj_member_log
		<set>
			<include refid="updateBase"/>
		</set>
		where id = #{id,jdbcType=BIGINT} 
	</update> 

	<!-- 全字段更新 需要注意-->
	<update id="updateByPrimaryKey" parameterType="com.e_commerce.miscroservice.commons.entity.application.user.MemberLog" >
		update yjj_member_log
		set 
			id = #{id ,jdbcType=BIGINT},
			member_id = #{memberId ,jdbcType=BIGINT},
			source = #{source ,jdbcType=VARCHAR},
			order_no = #{orderNo ,jdbcType=CHAR},
			before_del_state = #{beforeDelState ,jdbcType=TINYINT},
			after_del_state = #{afterDelState ,jdbcType=TINYINT},
			before_total_money = #{beforeTotalMoney ,jdbcType=DOUBLE},
			after_total_money = #{afterTotalMoney ,jdbcType=DOUBLE},
			before_end_time = #{beforeEndTime ,jdbcType=BIGINT},
			after_end_time = #{afterEndTime ,jdbcType=BIGINT},
			before_time_queue = #{beforeTimeQueue ,jdbcType=VARCHAR},
			after_time_queue = #{afterTimeQueue ,jdbcType=VARCHAR},
			create_time = #{createTime ,jdbcType=TIMESTAMP},
			create_user_id = #{createUserId ,jdbcType=BIGINT},
			before_wx_closed_time = #{beforeWxClosedTime ,jdbcType=BIGINT},
			after_wx_closed_time = #{afterWxClosedTime ,jdbcType=BIGINT}
		where id = #{id,jdbcType=BIGINT} 
	</update> 

	<!-- 所有的条件集合-->
	<sql id="whereCase"  >
		where  1=1 
		<if test="id  !=null">
			AND id = #{id,jdbcType=BIGINT} 
		</if>
		<if test="memberId  !=null">
			AND member_id = #{memberId,jdbcType=BIGINT} 
		</if>
		<if test="source  !=null">
			AND source = #{source,jdbcType=VARCHAR} 
		</if>
		<if test="orderNo  !=null">
			AND order_no = #{orderNo,jdbcType=CHAR} 
		</if>
		<if test="beforeDelState  !=null">
			AND before_del_state = #{beforeDelState,jdbcType=TINYINT} 
		</if>
		<if test="afterDelState  !=null">
			AND after_del_state = #{afterDelState,jdbcType=TINYINT} 
		</if>
		<if test="beforeTotalMoney  !=null">
			AND before_total_money = #{beforeTotalMoney,jdbcType=DOUBLE} 
		</if>
		<if test="afterTotalMoney  !=null">
			AND after_total_money = #{afterTotalMoney,jdbcType=DOUBLE} 
		</if>
		<if test="beforeEndTime  !=null">
			AND before_end_time = #{beforeEndTime,jdbcType=BIGINT} 
		</if>
		<if test="afterEndTime  !=null">
			AND after_end_time = #{afterEndTime,jdbcType=BIGINT} 
		</if>
		<if test="beforeTimeQueue  !=null">
			AND before_time_queue = #{beforeTimeQueue,jdbcType=VARCHAR} 
		</if>
		<if test="afterTimeQueue  !=null">
			AND after_time_queue = #{afterTimeQueue,jdbcType=VARCHAR} 
		</if>
		<if test="createTime  !=null">
			AND create_time = #{createTime,jdbcType=TIMESTAMP} 
		</if>
		<if test="createUserId  !=null">
			AND create_user_id = #{createUserId,jdbcType=BIGINT} 
		</if>
		<if test="beforeWxClosedTime  !=null">
			AND before_wx_closed_time = #{beforeWxClosedTime,jdbcType=BIGINT} 
		</if>
		<if test="afterWxClosedTime  !=null">
			AND after_wx_closed_time = #{afterWxClosedTime,jdbcType=BIGINT} 
		</if>
		<include refid="costomWhereCase"/>
	</sql>

	<!-- 查询一条，如果返回多条会报错-->
	<select id="selectOne" parameterType="java.util.Map" resultMap="BaseResultMap">
		SELECT
		<include refid="Base_Column_List" /> 
		FROM yjj_member_log 
		<include refid="whereCase" /> 
	</select>

	<!-- 查询一个list-->
	<select id="selectList" parameterType="java.util.Map" resultMap="BaseResultMap">
		SELECT
		<include refid="Base_Column_List" /> 
		FROM yjj_member_log 
		<include refid="whereCase" /> 
	</select>

	<!-- 查询一个list-->
	<select id="selectCount" parameterType="java.util.Map" resultType="java.lang.Integer">
		SELECT
		count(1) 
		FROM yjj_member_log
		<include refid="whereCase" /> 
	</select>

	<!--  @Costom -->
	<!-- 从上一行注释以上为系统生成 从这一行往下为用户自定义 请将自定义的sql放在此行下面 -->
	<sql id="costomWhereCase">
	</sql>

</mapper>